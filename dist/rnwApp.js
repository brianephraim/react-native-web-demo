!function(e){function t(t){for(var n,a,u=t[0],c=t[1],s=t[2],l=0,p=[];l<u.length;l++)a=u[l],o[a]&&p.push(o[a][0]),o[a]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);for(f&&f(t);p.length;)p.shift()();return i.push.apply(i,s||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,u=1;u<r.length;u++){var c=r[u];0!==o[c]&&(n=!1)}n&&(i.splice(t--,1),e=a(a.s=r[0]))}return e}var n={},o={0:0},i=[];function a(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=n,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var u=window.webpackJsonp=window.webpackJsonp||[],c=u.push.bind(u);u.push=t,u=u.slice();for(var s=0;s<u.length;s++)t(u[s]);var f=c;i.push([138,1]),r()}(Array(27).concat([function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},,,,,,,,,,,,,,,,,function(e,t,r){"use strict";r.r(t),r.d(t,"createStore",function(){return u}),r.d(t,"combineReducers",function(){return s}),r.d(t,"bindActionCreators",function(){return l}),r.d(t,"applyMiddleware",function(){return h}),r.d(t,"compose",function(){return d}),r.d(t,"__DO_NOT_USE__ActionTypes",function(){return i});var n=r(100),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,r){var o;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,f=[],l=f,p=!1;function d(){l===f&&(l=f.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),l.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var r=l.indexOf(e);l.splice(r,1)}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=c(s,e)}finally{p=!1}for(var t=f=l,r=0;r<t.length;r++){(0,t[r])()}return e}return v({type:i.INIT}),(o={dispatch:v,subscribe:y,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,v({type:i.REPLACE})}})[n.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(h())}return r(),{unsubscribe:t(r)}}})[n.a]=function(){return this},e},o}function c(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];0,"function"==typeof e[o]&&(r[o]=e[o])}var a,u=Object.keys(r);try{!function(e){Object.keys(e).forEach(function(t){var r=e[t];if(void 0===r(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(r)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,o={},i=0;i<u.length;i++){var s=u[i],f=r[s],l=e[s],p=f(l,t);if(void 0===p){var d=c(s,t);throw new Error(d)}o[s]=p,n=n||p!==l}return n?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function l(e,t){if("function"==typeof e)return f(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var r=Object.keys(e),n={},o=0;o<r.length;o++){var i=r[o],a=e[i];"function"==typeof a&&(n[i]=f(a,t))}return n}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){p(e,t,r[t])})}return e}({},r,{dispatch:n=d.apply(void 0,i)(r.dispatch)})}}}},,,,function(e,t){e.exports=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}},function(e,t,r){var n=r(152),o=r(153);e.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?o(e):t}},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(t)}e.exports=r},function(e,t,r){var n=r(154);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}},,,,,,,,,,function(e,t,r){"use strict";e.exports=function(e,t,r,n,o,i,a,u){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[r,n,o,i,a,u],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,r){var n=r(160);e.exports=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),o.forEach(function(t){n(e,t,r[t])})}return e}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.newsApiSettingsReducers=void 0;var n=r(97),o={newsApiSettings:(0,r(44).combineReducers)({searchTerm:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_SEARCH_TERM":return t.searchTerm;default:return e}},sortBy:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_SORT_BY":return t.sortBy;default:return e}}})};t.newsApiSettingsReducers=o;var i=(0,n.connect)(function(e){return e.newsApiSettings},{setSearchTerm:function(e){return function(t){return t({type:"SET_NEWS_SEARCH_TERM",searchTerm:e})}},setSortBy:function(e){return function(t){return t({type:"SET_NEWS_SORT_BY",sortBy:e})}}});t.default=i},,,,,function(e,t,r){"use strict";function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t);var o=r(1),i=r.n(o),a=r(0),u=r.n(a),c=i.a.createContext(null),s=function(e){function t(t){var r;r=e.call(this,t)||this;var n=t.store;return r.state={storeState:n.getState(),store:n},r}n(t,e);var r=t.prototype;return r.componentDidMount=function(){this._isMounted=!0,this.subscribe()},r.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},r.componentDidUpdate=function(e){this.props.store!==e.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},r.subscribe=function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var r=t.getState();e._isMounted&&e.setState(function(e){return e.storeState===r?null:{storeState:r}})});var r=t.getState();r!==this.state.storeState&&this.setState({storeState:r})},r.render=function(){var e=this.props.context||c;return i.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(o.Component);s.propTypes={store:u.a.shape({subscribe:u.a.func.isRequired,dispatch:u.a.func.isRequired,getState:u.a.func.isRequired}),context:u.a.object,children:u.a.any};var f=s;function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}var h=r(99),y=r.n(h),v=r(63),m=r.n(v);r(107);function b(e,t){void 0===t&&(t={});var r=t,a=r.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=r.methodName,f=void 0===s?"connectAdvanced":s,h=r.renderCountProp,v=void 0===h?void 0:h,b=r.shouldHandleStateChanges,g=void 0===b||b,w=r.storeKey,_=void 0===w?"store":w,O=r.withRef,E=void 0!==O&&O,P=r.forwardRef,S=void 0!==P&&P,j=r.context,x=void 0===j?c:j,N=d(r,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);m()(void 0===v,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),m()(!E,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var T="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React-Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";m()("store"===_,"storeKey has been removed and does not do anything. "+T);var R=x;return function(t){var r=t.displayName||t.name||"Component",a=u(r),c=p({},N,{getDisplayName:u,methodName:f,renderCountProp:v,shouldHandleStateChanges:g,storeKey:_,displayName:a,wrappedComponentName:r,WrappedComponent:t}),s=N.pure,d=o.Component,h=t;s&&(d=o.PureComponent);var b=function(t){function r(r){var n,o,a,u,f,d,y,v,b;return n=t.call(this,r)||this,m()(S?!r.wrapperProps[_]:!r[_],"Passing redux store in props has been removed and does not do anything. "+T),n.selectDerivedProps=function(t,r,n){if(s&&o===r&&a===t)return u;n!==f&&(f=n,d=e(n.dispatch,c)),o=r,a=t;var i=d(t,r);return u===i?u:u=i},n.selectChildElement=function(e,t){return e===y&&t===v||(y=e,v=t,b=i.a.createElement(h,p({},e,{ref:t}))),b},n.renderWrappedComponent=n.renderWrappedComponent.bind(l(l(n))),n}n(r,t);var o=r.prototype;return o.renderWrappedComponent=function(e){m()(e,'Could not find "store" in the context of "'+a+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+a+" in connect options.");var t,r=e.storeState,n=e.store,o=this.props;S&&(o=this.props.wrapperProps,t=this.props.forwardedRef);var i=this.selectDerivedProps(r,o,n);return this.selectChildElement(i,t)},o.render=function(){var e=this.props.context||R;return i.a.createElement(e.Consumer,null,this.renderWrappedComponent)},r}(d);if(b.WrappedComponent=t,b.displayName=a,S){var w=i.a.forwardRef(function(e,t){return i.a.createElement(b,{wrapperProps:e,forwardedRef:t})});return w.displayName=a,w.WrappedComponent=t,y()(w,t)}return y()(b,t)}}var g=Object.prototype.hasOwnProperty;function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function _(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var o=0;o<r.length;o++)if(!g.call(t,r[o])||!w(e[r[o]],t[r[o]]))return!1;return!0}var O=r(44);function E(e){return function(t,r){var n=e(t,r);function o(){return n}return o.dependsOnOwnProps=!1,o}}function P(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function S(e,t){return function(t,r){r.displayName;var n=function(e,t){return n.dependsOnOwnProps?n.mapToProps(e,t):n.mapToProps(e)};return n.dependsOnOwnProps=!0,n.mapToProps=function(t,r){n.mapToProps=e,n.dependsOnOwnProps=P(e);var o=n(t,r);return"function"==typeof o&&(n.mapToProps=o,n.dependsOnOwnProps=P(o),o=n(t,r)),o},n}}var j=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:E(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?E(function(t){return Object(O.bindActionCreators)(e,t)}):void 0}];var x=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:E(function(){return{}})}];function N(e,t,r){return p({},r,e,t)}var T=[function(e){return"function"==typeof e?function(e){return function(t,r){r.displayName;var n,o=r.pure,i=r.areMergedPropsEqual,a=!1;return function(t,r,u){var c=e(t,r,u);return a?o&&i(c,n)||(n=c):(a=!0,n=c),n}}}(e):void 0},function(e){return e?void 0:function(){return N}}];function R(e,t,r,n){return function(o,i){return r(e(o,i),t(n,i),i)}}function C(e,t,r,n,o){var i,a,u,c,s,f=o.areStatesEqual,l=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,y,v=!l(d,a),m=!f(o,i);return i=o,a=d,v&&m?(u=e(i,a),t.dependsOnOwnProps&&(c=t(n,a)),s=r(u,c,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(c=t(n,a)),s=r(u,c,a)):m?(h=e(i,a),y=!p(h,u),u=h,y&&(s=r(u,c,a)),s):s}return function(o,f){return d?h(o,f):(u=e(i=o,a=f),c=t(n,a),s=r(u,c,a),d=!0,s)}}function A(e,t){var r=t.initMapStateToProps,n=t.initMapDispatchToProps,o=t.initMergeProps,i=d(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=r(e,i),u=n(e,i),c=o(e,i);return(i.pure?C:R)(a,u,c,e,i)}function k(e,t,r){for(var n=t.length-1;n>=0;n--){var o=t[n](e);if(o)return o}return function(t,n){throw new Error("Invalid value of type "+typeof e+" for "+r+" argument when connecting component "+n.wrappedComponentName+".")}}function L(e,t){return e===t}var M,I,D,W,q,B,F,$,U,z,H,K,G=(D=(I=void 0===M?{}:M).connectHOC,W=void 0===D?b:D,q=I.mapStateToPropsFactories,B=void 0===q?x:q,F=I.mapDispatchToPropsFactories,$=void 0===F?j:F,U=I.mergePropsFactories,z=void 0===U?T:U,H=I.selectorFactory,K=void 0===H?A:H,function(e,t,r,n){void 0===n&&(n={});var o=n,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,c=void 0===u?L:u,s=o.areOwnPropsEqual,f=void 0===s?_:s,l=o.areStatePropsEqual,h=void 0===l?_:l,y=o.areMergedPropsEqual,v=void 0===y?_:y,m=d(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=k(e,B,"mapStateToProps"),g=k(t,$,"mapDispatchToProps"),w=k(r,z,"mergeProps");return W(K,p({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:g,initMergeProps:w,pure:a,areStatesEqual:c,areOwnPropsEqual:f,areStatePropsEqual:h,areMergedPropsEqual:v},m))});r.d(t,"Provider",function(){return f}),r.d(t,"connectAdvanced",function(){return b}),r.d(t,"ReactReduxContext",function(){return c}),r.d(t,"connect",function(){return G})},,function(e,t,r){"use strict";var n=r(107),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return n.isMemo(e)?a:u[e.$$typeof]||o}u[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,f=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(h){var o=d(r);o&&o!==h&&e(t,o,n)}var a=f(r);l&&(a=a.concat(l(r)));for(var u=c(t),y=c(r),v=0;v<a.length;++v){var m=a[v];if(!(i[m]||n&&n[m]||y&&y[m]||u&&u[m])){var b=p(r,m);try{s(t,m,b)}catch(e){}}}return t}return t}},function(e,t,r){"use strict";(function(e,n){var o,i=r(133);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var a=Object(i.a)(o);t.a=a}).call(this,r(42),r(157)(e))},,,,,,,function(e,t,r){"use strict";e.exports=r(156)},function(e,t,r){var n=r(27);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.newsReducers=void 0;var o=n(r(161)),i=n(r(91)),a=r(97),u=r(44),c=n(r(165)),s={setLoading:function(e){return function(t){return t({type:"SET_NEWS_LOADING",isLoading:e})}},setNewsData:function(e){return function(t){return t((0,i.default)({type:"SET_NEWS_DATA"},e))}}};var f={newsData:(0,u.combineReducers)({isLoading:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_LOADING":return t.isLoading;case"SET_NEWS_DATA":return!1;default:return e}},articles:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_DATA":var r=function(e){return e.filter(function(e){return e.urlToImage&&e.content}).map(function(e){return(0,i.default)({},e,{uriObject:{uri:e.urlToImage}})})}(t.articles),n=t.page?[].concat((0,o.default)(e),(0,o.default)(r)):r;return(0,c.default)(n,function(e){return e.url});default:return e}},currentCount:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_DATA":return t.page?t.articles.length+e:t.articles.length;default:return e}},totalResults:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_DATA":return t.totalResults;default:return e}},currentPage:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_NEWS_DATA":return t.page||1;default:return e}}})};t.newsReducers=f;var l=(0,a.connect)(function(e){return e.newsData},s);t.default=l},function(e,t){function r(){return e.exports=r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},r.apply(this,arguments)}e.exports=r},function(e,t,r){e.exports=r(173)},function(e,t){function r(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}e.exports=function(e){return function(){var t=this,n=arguments;return new Promise(function(o,i){var a=e.apply(t,n);function u(e){r(a,o,i,u,c,"next",e)}function c(e){r(a,o,i,u,c,"throw",e)}u(void 0)})}}},,,,,,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}r.d(t,"a",function(){return n})},,,,,function(e,t,r){e.exports=r(139)},function(e,t,r){var n=r(27),o=n(r(83)),i=n(r(151));o.default.registerComponent("ReactNativePlusWeb",function(){return i.default}),o.default.runApplication("ReactNativePlusWeb",{rootTag:document.getElementById("root")})},,,,,,,,,,,,function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(49)),a=n(r(50)),u=n(r(51)),c=n(r(52)),s=n(r(53)),f=o(r(1)),l=n(r(155)),p=n(r(167)),d="/Users/brianephraim/Sites/dia-homework/features/AppEntry.js",h=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(0,c.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return f.default.createElement(l.default,{__source:{fileName:d,lineNumber:18}},f.default.createElement(p.default,{__source:{fileName:d,lineNumber:19}}))}}]),t}(f.PureComponent);t.default=h},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?e.exports=n=function(e){return r(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":r(e)},n(t)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(t,n)}e.exports=r},function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(49)),a=n(r(50)),u=n(r(51)),c=n(r(52)),s=n(r(53)),f=o(r(1)),l=n(r(0)),p=r(97),d=r(44),h=n(r(158)),y=n(r(159)),v=(0,d.createStore)(y.default,(0,d.applyMiddleware)(h.default));window.store=v;var m=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(0,c.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return f.default.createElement(p.Provider,{store:v,__source:{fileName:"/Users/brianephraim/Sites/dia-homework/features/appRedux/ReduxProvider.js",lineNumber:22}},this.props.children)}}]),t}(f.Component);m.propTypes={children:l.default.node.isRequired};var b=m;t.default=b},function(e,t,r){"use strict";
/** @license React v16.8.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,u=n?Symbol.for("react.strict_mode"):60108,c=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,f=n?Symbol.for("react.context"):60110,l=n?Symbol.for("react.async_mode"):60111,p=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,y=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case l:case p:case a:case c:case u:case h:return e;default:switch(e=e&&e.$$typeof){case f:case d:case s:return e;default:return t}}case v:case y:case i:return t}}}function b(e){return m(e)===p}t.typeOf=m,t.AsyncMode=l,t.ConcurrentMode=p,t.ContextConsumer=f,t.ContextProvider=s,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=y,t.Portal=i,t.Profiler=c,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===c||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===y||e.$$typeof===s||e.$$typeof===f||e.$$typeof===d)},t.isAsyncMode=function(e){return b(e)||m(e)===l},t.isConcurrentMode=b,t.isContextConsumer=function(e){return m(e)===f},t.isContextProvider=function(e){return m(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===d},t.isFragment=function(e){return m(e)===a},t.isLazy=function(e){return m(e)===v},t.isMemo=function(e){return m(e)===y},t.isPortal=function(e){return m(e)===i},t.isProfiler=function(e){return m(e)===c},t.isStrictMode=function(e){return m(e)===u},t.isSuspense=function(e){return m(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,r){"use strict";function n(e){return function(t){var r=t.dispatch,n=t.getState;return function(t){return function(o){return"function"==typeof o?o(r,n,e):t(o)}}}}r.r(t);var o=n();o.withExtraArgument=n,t.default=o},function(e,t,r){var n=r(27);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(91)),i=r(44),a=r(108),u=r(92),c=(0,i.combineReducers)((0,o.default)({},a.newsReducers,u.newsApiSettingsReducers));t.default=c},function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},function(e,t,r){var n=r(162),o=r(163),i=r(164);e.exports=function(e){return n(e)||o(e)||i()}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,r){(function(e,r){var n=200,o="Expected a function",i="__lodash_hash_undefined__",a=1,u=2,c=1/0,s=9007199254740991,f="[object Arguments]",l="[object Array]",p="[object Boolean]",d="[object Date]",h="[object Error]",y="[object Function]",v="[object GeneratorFunction]",m="[object Map]",b="[object Number]",g="[object Object]",w="[object RegExp]",_="[object Set]",O="[object String]",E="[object Symbol]",P="[object ArrayBuffer]",S="[object DataView]",j=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,x=/^\w*$/,N=/^\./,T=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,R=/\\(\\)?/g,C=/^\[object .+?Constructor\]$/,A=/^(?:0|[1-9]\d*)$/,k={};k["[object Float32Array]"]=k["[object Float64Array]"]=k["[object Int8Array]"]=k["[object Int16Array]"]=k["[object Int32Array]"]=k["[object Uint8Array]"]=k["[object Uint8ClampedArray]"]=k["[object Uint16Array]"]=k["[object Uint32Array]"]=!0,k[f]=k[l]=k[P]=k[p]=k[S]=k[d]=k[h]=k[y]=k[m]=k[b]=k[g]=k[w]=k[_]=k[O]=k["[object WeakMap]"]=!1;var L="object"==typeof e&&e&&e.Object===Object&&e,M="object"==typeof self&&self&&self.Object===Object&&self,I=L||M||Function("return this")(),D=t&&!t.nodeType&&t,W=D&&"object"==typeof r&&r&&!r.nodeType&&r,q=W&&W.exports===D&&L.process,B=function(){try{return q&&q.binding("util")}catch(e){}}(),F=B&&B.isTypedArray;function $(e,t){return!!(e?e.length:0)&&function(e,t,r){if(t!=t)return function(e,t,r,n){var o=e.length,i=r+(n?1:-1);for(;n?i--:++i<o;)if(t(e[i],i,e))return i;return-1}(e,H,r);var n=r-1,o=e.length;for(;++n<o;)if(e[n]===t)return n;return-1}(e,t,0)>-1}function U(e,t,r){for(var n=-1,o=e?e.length:0;++n<o;)if(r(t,e[n]))return!0;return!1}function z(e,t){for(var r=-1,n=e?e.length:0;++r<n;)if(t(e[r],r,e))return!0;return!1}function H(e){return e!=e}function K(e,t){return e.has(t)}function G(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function Y(e){var t=-1,r=Array(e.size);return e.forEach(function(e,n){r[++t]=[n,e]}),r}function V(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e}),r}var J,Q,X,Z=Array.prototype,ee=Function.prototype,te=Object.prototype,re=I["__core-js_shared__"],ne=(J=/[^.]+$/.exec(re&&re.keys&&re.keys.IE_PROTO||""))?"Symbol(src)_1."+J:"",oe=ee.toString,ie=te.hasOwnProperty,ae=te.toString,ue=RegExp("^"+oe.call(ie).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ce=I.Symbol,se=I.Uint8Array,fe=te.propertyIsEnumerable,le=Z.splice,pe=(Q=Object.keys,X=Object,function(e){return Q(X(e))}),de=ze(I,"DataView"),he=ze(I,"Map"),ye=ze(I,"Promise"),ve=ze(I,"Set"),me=ze(I,"WeakMap"),be=ze(Object,"create"),ge=Xe(de),we=Xe(he),_e=Xe(ye),Oe=Xe(ve),Ee=Xe(me),Pe=ce?ce.prototype:void 0,Se=Pe?Pe.valueOf:void 0,je=Pe?Pe.toString:void 0;function xe(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Ne(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Te(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Re(e){var t=-1,r=e?e.length:0;for(this.__data__=new Te;++t<r;)this.add(e[t])}function Ce(e){this.__data__=new Ne(e)}function Ae(e,t){var r=rt(e)||tt(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,o=!!n;for(var i in e)!t&&!ie.call(e,i)||o&&("length"==i||Ke(i,n))||r.push(i);return r}function ke(e,t){for(var r=e.length;r--;)if(et(e[r][0],t))return r;return-1}function Le(e,t){for(var r=0,n=(t=Ge(t,e)?[t]:Be(t)).length;null!=e&&r<n;)e=e[Qe(t[r++])];return r&&r==n?e:void 0}function Me(e,t){return null!=e&&t in Object(e)}function Ie(e,t,r,n,o){return e===t||(null==e||null==t||!at(e)&&!ut(t)?e!=e&&t!=t:function(e,t,r,n,o,i){var c=rt(e),s=rt(t),y=l,v=l;c||(y=(y=He(e))==f?g:y);s||(v=(v=He(t))==f?g:v);var j=y==g&&!G(e),x=v==g&&!G(t),N=y==v;if(N&&!j)return i||(i=new Ce),c||st(e)?$e(e,t,r,n,o,i):function(e,t,r,n,o,i,c){switch(r){case S:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case P:return!(e.byteLength!=t.byteLength||!n(new se(e),new se(t)));case p:case d:case b:return et(+e,+t);case h:return e.name==t.name&&e.message==t.message;case w:case O:return e==t+"";case m:var s=Y;case _:var f=i&u;if(s||(s=V),e.size!=t.size&&!f)return!1;var l=c.get(e);if(l)return l==t;i|=a,c.set(e,t);var y=$e(s(e),s(t),n,o,i,c);return c.delete(e),y;case E:if(Se)return Se.call(e)==Se.call(t)}return!1}(e,t,y,r,n,o,i);if(!(o&u)){var T=j&&ie.call(e,"__wrapped__"),R=x&&ie.call(t,"__wrapped__");if(T||R){var C=T?e.value():e,A=R?t.value():t;return i||(i=new Ce),r(C,A,n,o,i)}}if(!N)return!1;return i||(i=new Ce),function(e,t,r,n,o,i){var a=o&u,c=ft(e),s=c.length,f=ft(t).length;if(s!=f&&!a)return!1;for(var l=s;l--;){var p=c[l];if(!(a?p in t:ie.call(t,p)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var h=!0;i.set(e,t),i.set(t,e);for(var y=a;++l<s;){p=c[l];var v=e[p],m=t[p];if(n)var b=a?n(m,v,p,t,e,i):n(v,m,p,e,t,i);if(!(void 0===b?v===m||r(v,m,n,o,i):b)){h=!1;break}y||(y="constructor"==p)}if(h&&!y){var g=e.constructor,w=t.constructor;g!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof g&&g instanceof g&&"function"==typeof w&&w instanceof w)&&(h=!1)}return i.delete(e),i.delete(t),h}(e,t,r,n,o,i)}(e,t,Ie,r,n,o))}function De(e){return!(!at(e)||(t=e,ne&&ne in t))&&(ot(e)||G(e)?ue:C).test(Xe(e));var t}function We(e){return"function"==typeof e?e:null==e?lt:"object"==typeof e?rt(e)?function(e,t){if(Ge(e)&&Ye(t))return Ve(Qe(e),t);return function(r){var n=function(e,t,r){var n=null==e?void 0:Le(e,t);return void 0===n?r:n}(r,e);return void 0===n&&n===t?function(e,t){return null!=e&&function(e,t,r){t=Ge(t,e)?[t]:Be(t);var n,o=-1,i=t.length;for(;++o<i;){var a=Qe(t[o]);if(!(n=null!=e&&r(e,a)))break;e=e[a]}if(n)return n;return!!(i=e?e.length:0)&&it(i)&&Ke(a,i)&&(rt(e)||tt(e))}(e,t,Me)}(r,e):Ie(t,n,void 0,a|u)}}(e[0],e[1]):function(e){var t=function(e){var t=ft(e),r=t.length;for(;r--;){var n=t[r],o=e[n];t[r]=[n,o,Ye(o)]}return t}(e);if(1==t.length&&t[0][2])return Ve(t[0][0],t[0][1]);return function(r){return r===e||function(e,t,r,n){var o=r.length,i=o,c=!n;if(null==e)return!i;for(e=Object(e);o--;){var s=r[o];if(c&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<i;){var f=(s=r[o])[0],l=e[f],p=s[1];if(c&&s[2]){if(void 0===l&&!(f in e))return!1}else{var d=new Ce;if(n)var h=n(l,p,f,e,t,d);if(!(void 0===h?Ie(p,l,n,a|u,d):h))return!1}}return!0}(r,e,t)}}(e):Ge(t=e)?(r=Qe(t),function(e){return null==e?void 0:e[r]}):function(e){return function(t){return Le(t,e)}}(t);var t,r}function qe(e){if(r=(t=e)&&t.constructor,n="function"==typeof r&&r.prototype||te,t!==n)return pe(e);var t,r,n,o=[];for(var i in Object(e))ie.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Be(e){return rt(e)?e:Je(e)}xe.prototype.clear=function(){this.__data__=be?be(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var t=this.__data__;if(be){var r=t[e];return r===i?void 0:r}return ie.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return be?void 0!==t[e]:ie.call(t,e)},xe.prototype.set=function(e,t){return this.__data__[e]=be&&void 0===t?i:t,this},Ne.prototype.clear=function(){this.__data__=[]},Ne.prototype.delete=function(e){var t=this.__data__,r=ke(t,e);return!(r<0||(r==t.length-1?t.pop():le.call(t,r,1),0))},Ne.prototype.get=function(e){var t=this.__data__,r=ke(t,e);return r<0?void 0:t[r][1]},Ne.prototype.has=function(e){return ke(this.__data__,e)>-1},Ne.prototype.set=function(e,t){var r=this.__data__,n=ke(r,e);return n<0?r.push([e,t]):r[n][1]=t,this},Te.prototype.clear=function(){this.__data__={hash:new xe,map:new(he||Ne),string:new xe}},Te.prototype.delete=function(e){return Ue(this,e).delete(e)},Te.prototype.get=function(e){return Ue(this,e).get(e)},Te.prototype.has=function(e){return Ue(this,e).has(e)},Te.prototype.set=function(e,t){return Ue(this,e).set(e,t),this},Re.prototype.add=Re.prototype.push=function(e){return this.__data__.set(e,i),this},Re.prototype.has=function(e){return this.__data__.has(e)},Ce.prototype.clear=function(){this.__data__=new Ne},Ce.prototype.delete=function(e){return this.__data__.delete(e)},Ce.prototype.get=function(e){return this.__data__.get(e)},Ce.prototype.has=function(e){return this.__data__.has(e)},Ce.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Ne){var o=r.__data__;if(!he||o.length<n-1)return o.push([e,t]),this;r=this.__data__=new Te(o)}return r.set(e,t),this};var Fe=ve&&1/V(new ve([,-0]))[1]==c?function(e){return new ve(e)}:function(){};function $e(e,t,r,n,o,i){var c=o&u,s=e.length,f=t.length;if(s!=f&&!(c&&f>s))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var p=-1,d=!0,h=o&a?new Re:void 0;for(i.set(e,t),i.set(t,e);++p<s;){var y=e[p],v=t[p];if(n)var m=c?n(v,y,p,t,e,i):n(y,v,p,e,t,i);if(void 0!==m){if(m)continue;d=!1;break}if(h){if(!z(t,function(e,t){if(!h.has(t)&&(y===e||r(y,e,n,o,i)))return h.add(t)})){d=!1;break}}else if(y!==v&&!r(y,v,n,o,i)){d=!1;break}}return i.delete(e),i.delete(t),d}function Ue(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function ze(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return De(r)?r:void 0}var He=function(e){return ae.call(e)};function Ke(e,t){return!!(t=null==t?s:t)&&("number"==typeof e||A.test(e))&&e>-1&&e%1==0&&e<t}function Ge(e,t){if(rt(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!ct(e))||(x.test(e)||!j.test(e)||null!=t&&e in Object(t))}function Ye(e){return e==e&&!at(e)}function Ve(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}(de&&He(new de(new ArrayBuffer(1)))!=S||he&&He(new he)!=m||ye&&"[object Promise]"!=He(ye.resolve())||ve&&He(new ve)!=_||me&&"[object WeakMap]"!=He(new me))&&(He=function(e){var t=ae.call(e),r=t==g?e.constructor:void 0,n=r?Xe(r):void 0;if(n)switch(n){case ge:return S;case we:return m;case _e:return"[object Promise]";case Oe:return _;case Ee:return"[object WeakMap]"}return t});var Je=Ze(function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(ct(e))return je?je.call(e):"";var t=e+"";return"0"==t&&1/e==-c?"-0":t}(t);var r=[];return N.test(e)&&r.push(""),e.replace(T,function(e,t,n,o){r.push(n?o.replace(R,"$1"):t||e)}),r});function Qe(e){if("string"==typeof e||ct(e))return e;var t=e+"";return"0"==t&&1/e==-c?"-0":t}function Xe(e){if(null!=e){try{return oe.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ze(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(o);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=e.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(Ze.Cache||Te),r}function et(e,t){return e===t||e!=e&&t!=t}function tt(e){return function(e){return ut(e)&&nt(e)}(e)&&ie.call(e,"callee")&&(!fe.call(e,"callee")||ae.call(e)==f)}Ze.Cache=Te;var rt=Array.isArray;function nt(e){return null!=e&&it(e.length)&&!ot(e)}function ot(e){var t=at(e)?ae.call(e):"";return t==y||t==v}function it(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function at(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function ut(e){return!!e&&"object"==typeof e}function ct(e){return"symbol"==typeof e||ut(e)&&ae.call(e)==E}var st=F?function(e){return function(t){return e(t)}}(F):function(e){return ut(e)&&it(e.length)&&!!k[ae.call(e)]};function ft(e){return nt(e)?Ae(e):qe(e)}function lt(e){return e}r.exports=function(e,t){return e&&e.length?function(e,t,r){var o=-1,i=$,a=e.length,u=!0,c=[],s=c;if(r)u=!1,i=U;else if(a>=n){var f=t?null:Fe(e);if(f)return V(f);u=!1,i=K,s=new Re}else s=t?[]:c;e:for(;++o<a;){var l=e[o],p=t?t(l):l;if(l=r||0!==l?l:0,u&&p==p){for(var d=s.length;d--;)if(s[d]===p)continue e;t&&s.push(p),c.push(l)}else i(s,p,r)||(s!==c&&s.push(p),c.push(l))}return c}(e,We(t)):[]}}).call(this,r(42),r(166)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(49)),a=n(r(50)),u=n(r(51)),c=n(r(52)),s=n(r(53)),f=o(r(1)),l=n(r(0)),p=n(r(32)),d=n(r(4)),h=n(r(3)),y=n(r(79)),v=n(r(36)),m=n(r(80)),b=n(r(171)),g=n(r(176)),w="/Users/brianephraim/Sites/dia-homework/features/NewsList.js",_=h.default.create({listWrap:{flex:1},list:{backgroundColor:"#EDECEC",width:"100%",paddingBottom:26},columnWrapperStyle:{width:"100%",minWidth:670,maxWidth:1040,alignSelf:"center",paddingTop:26,paddingLeft:37,paddingRight:33},item:{paddingHorizontal:8,paddingVertical:10,width:"50%",height:555,flexDirection:"column"},itemInner:{flex:1,backgroundColor:"#FFFFFF",justifyContent:"space-between"},image:{paddingTop:"56.25%",width:"100%"},header:{color:"#222222",fontFamily:"Lato",marginHorizontal:47,marginTop:42,marginBottom:11,fontSize:24,fontWeight:"700"},text:{color:"#4f4f4f",fontFamily:"Lato",marginHorizontal:47,fontSize:14,lineHeight:20,marginBottom:22},linkButton:{backgroundColor:"#313131",alignSelf:"flex-start",marginHorizontal:47,marginBottom:46,color:"#ffffff",minWidth:146,height:40,lineHeight:40,textAlign:"center",fontSize:14,borderRadius:3},activityIndicator:{position:"absolute",bottom:0,left:0,right:0}}),O=[0],E=function(e){function t(){var e,r;(0,i.default)(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(r=(0,u.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).onEndReached=function(){r.props.fetchNextPage()},r.keyExtractor=function(e){return e.url},r.renderItem=function(e){var t=e.item;return f.default.createElement(d.default,{style:_.item,__source:{fileName:w,lineNumber:118}},f.default.createElement(d.default,{style:_.itemInner,__source:{fileName:w,lineNumber:119}},f.default.createElement(d.default,{__source:{fileName:w,lineNumber:120}},f.default.createElement(v.default,{style:_.image,source:t.uriObject,__source:{fileName:w,lineNumber:121}}),f.default.createElement(p.default,{style:_.header,numberOfLines:1,__source:{fileName:w,lineNumber:122}},t.title),f.default.createElement(p.default,{style:_.text,numberOfLines:2,__source:{fileName:w,lineNumber:125}},t.content.slice(0,180).trim()+"...")),f.default.createElement(p.default,{href:t.url,accessibilityRole:"link",target:"_blank",style:_.linkButton,__source:{fileName:w,lineNumber:129}},"Read More")))},r}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return f.default.createElement(d.default,{style:_.listWrap,__source:{fileName:w,lineNumber:143}},f.default.createElement(y.default,{refreshing:this.props.isLoading,key:this.props.apiSettingsKey,onEndReached:this.onEndReached,stickyHeaderIndices:O,ListHeaderComponent:g.default,style:_.list,data:this.props.articles,renderItem:this.renderItem,keyExtractor:this.keyExtractor,numColumns:2,columnWrapperStyle:_.columnWrapperStyle,__source:{fileName:w,lineNumber:144}}),this.props.isLoading&&f.default.createElement(m.default,{style:_.activityIndicator,__source:{fileName:w,lineNumber:158}}))}}]),t}(f.PureComponent);E.propTypes={articles:l.default.array.isRequired,fetchNextPage:l.default.func.isRequired,apiSettingsKey:l.default.string.isRequired,isLoading:l.default.bool.isRequired};var P=(0,b.default)(E);t.default=P},,,,function(e,t,r){var n=r(27);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(172)).default;t.default=o},function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(109)),a=n(r(110)),u=n(r(91)),c=n(r(111)),s=n(r(49)),f=n(r(50)),l=n(r(51)),p=n(r(52)),d=n(r(53)),h=o(r(1)),y=n(r(0)),v=r(44),m=n(r(92)),b=n(r(175)),g=n(r(108)),w="/Users/brianephraim/Sites/dia-homework/features/withNews/withNews.js",_=(0,v.compose)(g.default,m.default);var O=function(e){var t=function(t){function r(){var e,t;(0,s.default)(this,r);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(t=(0,l.default)(this,(e=(0,p.default)(r)).call.apply(e,[this].concat(o)))).fetchNextPage=function(){var e=t.props,r=e.currentCount,n=e.totalResults,o=e.currentPage;r<n&&t.fetchNewsApi(o+1)},t}return(0,d.default)(r,t),(0,f.default)(r,[{key:"fetchNewsApi",value:(n=(0,c.default)(a.default.mark(function e(t){var r,n,o,i;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this.props.setLoading(!0),e.prev=1,n=this.props,o=n.sortBy,i=n.searchTerm,e.next=5,(0,b.default)({sortBy:o,searchTerm:i,page:t});case 5:r=e.sent,this.props.setNewsData((0,u.default)({},r,{page:t})),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(1),console.warn("WithNews fetch error",e.t0),this.props.setLoading(!1);case 13:case"end":return e.stop()}},e,this,[[1,9]])})),function(e){return n.apply(this,arguments)})},{key:"componentDidMount",value:function(){this.fetchNewsApi()}},{key:"componentDidUpdate",value:function(e){this.props.sortBy===e.sortBy&&this.props.searchTerm===e.searchTerm||this.fetchNewsApi()}},{key:"render",value:function(){return h.default.createElement(e,(0,i.default)({},this.props,{fetchNextPage:this.fetchNextPage,apiSettingsKey:this.props.sortBy+"_"+this.props.searchTerm,__source:{fileName:w,lineNumber:70}}))}}]),r;var n}(h.PureComponent);return t.propTypes={setLoading:y.default.func.isRequired,setNewsData:y.default.func.isRequired,sortBy:y.default.string.isRequired,searchTerm:y.default.string.isRequired,currentCount:y.default.number.isRequired,totalResults:y.default.number.isRequired,currentPage:y.default.number.isRequired},_(t)};t.default=O},function(e,t,r){var n=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,e.exports=r(174),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(e){n.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var r,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s="object"==typeof e,f=t.regeneratorRuntime;if(f)s&&(e.exports=f);else{(f=t.regeneratorRuntime=s?e.exports:{}).wrap=w;var l="suspendedStart",p="suspendedYield",d="executing",h="completed",y={},v={};v[a]=function(){return this};var m=Object.getPrototypeOf,b=m&&m(m(C([])));b&&b!==n&&o.call(b,a)&&(v=b);var g=P.prototype=O.prototype=Object.create(v);E.prototype=g.constructor=P,P.constructor=E,P[c]=E.displayName="GeneratorFunction",f.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===E||"GeneratorFunction"===(t.displayName||t.name))},f.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,P):(e.__proto__=P,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(g),e},f.awrap=function(e){return{__await:e}},S(j.prototype),j.prototype[u]=function(){return this},f.AsyncIterator=j,f.async=function(e,t,r,n){var o=new j(w(e,t,r,n));return f.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},S(g),g[c]="Generator",g[a]=function(){return this},g.toString=function(){return"[object Generator]"},f.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=C,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(T),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,o){return u.type="throw",u.arg=e,t.next=n,o&&(t.method="next",t.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;T(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=r),y}}}function w(e,t,r,n){var o=t&&t.prototype instanceof O?t:O,i=Object.create(o.prototype),a=new R(n||[]);return i._invoke=function(e,t,r){var n=l;return function(o,i){if(n===d)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw i;return A()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=x(a,r);if(u){if(u===y)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=_(e,t,r);if("normal"===c.type){if(n=r.done?h:p,c.arg===y)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=h,r.method="throw",r.arg=c.arg)}}}(e,r,a),i}function _(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}function O(){}function E(){}function P(){}function S(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function j(e){var t;this._invoke=function(r,n){function i(){return new Promise(function(t,i){!function t(r,n,i,a){var u=_(e[r],e,n);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(e){t("next",e,i,a)},function(e){t("throw",e,i,a)}):Promise.resolve(s).then(function(e){c.value=e,i(c)},function(e){return t("throw",e,i,a)})}a(u.arg)}(r,n,t,i)})}return t=t?t.then(i,i):i()}}function x(e,t){var n=e.iterator[t.method];if(n===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,x(e,t),"throw"===t.method))return y;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=_(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,y;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,y):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,y)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function C(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function t(){for(;++n<e.length;)if(o.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=r,t.done=!0,t};return i.next=i}}return{next:A}}function A(){return{value:r,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(e,t,r){var n=r(27);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(110)),i=n(r(111));function a(){return(a=(0,i.default)(o.default.mark(function e(t){var r,n,i,a,u,c,s,f,l;return o.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.searchTerm,n=t.sortBy,i=t.page,n="topHeadlines"===n?"":n,a=["apiKey=0750fd6773de4038bbcbb4d5d99083a9"],u="everything",r||n||(a.push("country=us"),u="top-headlines"),r&&a.push("q="+encodeURIComponent(r)),n&&a.push("sortBy="+encodeURIComponent(n)),"everything"!==u||r||(c=["abc-news","associated-press","axios","bbc-news","bloomberg","buzzfeed","cbs-news","cnn","fox-news","msnbc","nbc-news","newsweek","politico","reuters","the-guardian-uk","the-hill","the-new-york-times","the-wall-street-journal","the-washington-post","usa-today"],a.push("sources="+c.join(","))),"everything"===u&&a.push("language=en"),i&&a.push("page="+i),s="https://newsapi.org/v2/"+u+"?"+a.join("&"),f=new Request(s),e.next=14,fetch(f).then(function(e){return e.json()});case 14:if("ok"===(l=e.sent).status){e.next=17;break}throw new Error(JSON.stringify(l));case 17:return e.abrupt("return",l);case 18:case"end":return e.stop()}},e,this)}))).apply(this,arguments)}var u=function(e){return a.apply(this,arguments)};t.default=u},function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(49)),a=n(r(50)),u=n(r(51)),c=n(r(52)),s=n(r(53)),f=o(r(1)),l=n(r(0)),p=n(r(4)),d=n(r(32)),h=n(r(3)),y=n(r(81)),v=n(r(56)),m=n(r(92)),b=n(r(177)),g="/Users/brianephraim/Sites/dia-homework/features/NewsSearchBar.js",w=h.default.create({headerWrap:{backgroundColor:"#454545",flexDirection:"row",justifyContent:"center"},headerWrapInner:{maxWidth:1040,minWidth:670,paddingLeft:46,paddingRight:42,alignItems:"center",justifyContent:"center",flexDirection:"row",height:64,flex:1},textInput:{backgroundColor:"#313131",color:"#ffffff",flex:1,height:40,paddingLeft:15,fontSize:14,fontFamily:"Lato",marginRight:9},formButton:{backgroundColor:"#E31F3B",width:147,height:40,lineHeight:40,textAlign:"center",color:"#ffffff",fontFamily:"Lato"}}),_=function(e){function t(e){var r,n=e.searchTerm;return(0,i.default)(this,t),(r=(0,u.default)(this,(0,c.default)(t).call(this))).onChangeSort=function(e){r.props.setSortBy(e.target.value)},r.onChangeSearchTermEntry=function(e){r.setState({searchTermEntry:e.target.value})},r.onKeyPress=function(e){"Enter"===e.key&&(e.preventDefault(),e.stopPropagation(),r.onPressSearch())},r.onPressSearch=function(){r.props.setSearchTerm(r.state.searchTermEntry)},r.state={searchTermEntry:n},r}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return f.default.createElement(p.default,{style:w.headerWrap,__source:{fileName:g,lineNumber:94}},f.default.createElement(p.default,{style:w.headerWrapInner,__source:{fileName:g,lineNumber:95}},f.default.createElement(y.default,{style:w.textInput,placeholder:"Some search term",placeholderTextColor:"#ffffff",value:this.state.searchTermEntry,onChange:this.onChangeSearchTermEntry,onKeyPress:this.onKeyPress,__source:{fileName:g,lineNumber:96}}),f.default.createElement(b.default,{onChange:this.onChangeSort,value:this.props.sortBy,__source:{fileName:g,lineNumber:104}}),f.default.createElement(v.default,{onPress:this.onPressSearch,__source:{fileName:g,lineNumber:105}},f.default.createElement(d.default,{style:w.formButton,__source:{fileName:g,lineNumber:106}},"Search"))))}}]),t}(f.PureComponent);_.propTypes={setSearchTerm:l.default.func.isRequired,setSortBy:l.default.func.isRequired,sortBy:l.default.string.isRequired,searchTerm:l.default.string.isRequired};var O=(0,m.default)(_);t.default=O},function(e,t,r){var n=r(27),o=r(48);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(r(109)),a=n(r(49)),u=n(r(50)),c=n(r(51)),s=n(r(52)),f=n(r(53)),l=o(r(1)),p="/Users/brianephraim/Sites/dia-homework/features/Dropdown.web.js",d={span:{position:"relative",display:"inline-block",verticalAlign:"middle",marginRight:12,width:150},select:{fontSize:14,color:"#fff",fontFamily:"Lato",height:40,paddingLeft:13,width:"100%",backgroundColor:"#313131",borderWidth:0,margin:0,borderRadius:3,MozAppearance:"none",WebkitAppearance:"none",appearance:"none"},downArrow:{position:"absolute",right:18,top:8,color:"#fff",pointerEvents:"none"}},h=function(e){function t(){return(0,a.default)(this,t),(0,c.default)(this,(0,s.default)(t).apply(this,arguments))}return(0,f.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){return l.default.createElement("span",{style:d.span,__source:{fileName:p,lineNumber:51}},l.default.createElement("select",(0,i.default)({style:d.select},this.props,{__source:{fileName:p,lineNumber:52}}),l.default.createElement("option",{value:"",hidden:!0,__source:{fileName:p,lineNumber:53}},"Sort Articles"),l.default.createElement("option",{value:"topHeadlines",__source:{fileName:p,lineNumber:56}},"Top Headlines"),l.default.createElement("option",{value:"publishedAt",__source:{fileName:p,lineNumber:57}},"Published At"),l.default.createElement("option",{value:"relevancy",__source:{fileName:p,lineNumber:58}},"Relevancy"),l.default.createElement("option",{value:"popularity",__source:{fileName:p,lineNumber:59}},"Popularity")),l.default.createElement("span",{style:d.downArrow,__source:{fileName:p,lineNumber:61}},"▾"))}}]),t}(l.PureComponent);t.default=h}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,